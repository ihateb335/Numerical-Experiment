namespace NE_DLL
{
    public class NE_Bessel_Functions
    {
        private static double BF_J_1(int n, double x, double eps = 1.0E-17)
        {
            double
                p = 1.0,
                s = 1.0,
                z = x * 0.5,
                t = 0.0;
            /*
            for (double t = 1.0; Math.Abs(p) > eps; t += 1.0)
            {
                p *= -(z / t) * (z / (t + n));
                s += p;
            }
             */
            const double step = 1.0;

            while (Math.Abs(p) > eps)
            {
                t += step;
                p *= -(z / t) * (z / (t + n));
                s += p;
            }
            for (int i = 1; i <= n; ++i) s *= z / i;

            return s;
        }
        private static double BF_J_2(int n, double x, double eps = 1.0E-17)
        {
            double 
                p1 = 1.0,
                p = 1.0,
                t = -0.5,

                q1 = 0.0, 
                s = 1.0, 
                z = 0.5 / x,

                q;

            while (s > eps)
            {
                t += 1.0; 
                q = p * (n - t) * z * (n + t) / (t + 0.5);
                q1 += q;

                t += 1.0; 
                p = q * (t - n) * z * (n + t) / (t + 0.5);
                p1 += p;

                s = (Math.Abs(p) + Math.Abs(q)) / 2;
            }

            t = 2 * Math.PI; 
            z = x; 
            
            while (z > t) z -= t;

            z -= Math.PI * (n + 0.5) * 0.5;

            return
                Math.Sqrt(4.0 / x / t) * (p1 * Math.Cos(z) - q1 * Math.Sin(z));
        }

        #region Raw Data
        static readonly double[] XG = {
    0.683761844314234441028446862517079E-03 ,
    0.360158466823374284469963714262886E-02 ,
    0.884642130079547003790629812314730E-02 ,
    0.164116464528302237947118587905722E-01 ,
    0.262861635153667038333479048006586E-01 ,
    0.384553361209510768760506012493394E-01 ,
    0.529010959504073226149962740152103E-01 ,
    0.696019856229239034617424377852098E-01 ,
    0.885331948418388553484752684818948E-01 ,
    0.109666598675042567396032124654762E+00 ,
    0.132970799892736755113728904082117E+00 ,
    0.158411175855867819901860301416604E+00 ,
    0.185949930070547869806959027021368E+00 ,
    0.215546148401714049500165264185151E+00 ,
    0.247155859891645135497500213848424E+00 ,
    0.280732102106149938121361525045293E+00 ,
    0.316224990917707957972782817866817E+00 ,
    0.353581794625138500472140641558692E+00 ,
    0.392747012301422604114194368445859E+00 ,
    0.433662456254250861447110440526640E+00 ,
    0.476267338477350028609580677279448E+00 ,
    0.520498360964485355008987435354262E+00 ,
    0.566289809752166912774658922508774E+00 ,
    0.613573652551471848820555404962122E+00 ,
    0.662279639824015693656194980531236E+00 ,
    0.712335409151960050188443419648448E+00 ,
    0.763666592747031728468070046929151E+00 ,
    0.816196927938852905862068944672233E+00 ,
    0.869848370478447708437436925077738E+00 ,
    0.924541210488602855448090863552371E+00 ,
    0.980194190888824004224819825058219E+00 ,
    0.103672462811895045732373536605586E+01 ,
    0.109404853498207404964141774870823E+01 ,
    0.115208074542425816004970896221147E+01 ,
    0.121073504106567441335290321717997E+01 ,
    0.126992427929517192575131446835304E+01 ,
    0.132956052273797069641591048189763E+01 ,
    0.138955516990413036230711445082931E+01 ,
    0.144981908682369101085743719089495E+01 ,
    0.151026273947291666899582686289021E+01 ,
    0.157079632679489661923132169163975E+01 ,
    0.163132991411687656946681652038929E+01 ,
    0.169177356676610222760520619238455E+01 ,
    0.175203748368566287615552893245019E+01 ,
    0.181203213085182254204673290138187E+01 ,
    0.187166837429462131271132891492646E+01 ,
    0.193085761252411882510974016609953E+01 ,
    0.198951190816553507841293442106803E+01 ,
    0.204754411860771918882122563457127E+01 ,
    0.210486802547084278113890801722364E+01 ,
    0.216139846270096923423782355822128E+01 ,
    0.221705144310119038301455251972713E+01 ,
    0.227174428311134553002520645820176E+01 ,
    0.232539572565094033260057443860727E+01 ,
    0.237792606084276150999457333635035E+01 ,
    0.242925724443783318827419996363105E+01 ,
    0.247931301376577754480644840274826E+01 ,
    0.252801900103832138964208797831738E+01 ,
    0.257530284383762632568798446077073E+01 ,
    0.262109429262530788345365594792524E+01 ,
    0.266532531511244320985306270600005E+01 ,
    0.270793019733554237701553294275286E+01 ,
    0.274884564128837063434844901483364E+01 ,
    0.278801085896465473799050274172081E+01 ,
    0.282536766267208528048986056541268E+01 ,
    0.286086055148364330034128185823421E+01 ,
    0.289443679369814810296514316943108E+01 ,
    0.292604650518807918896247811909435E+01 ,
    0.295564272351924536865568435625813E+01 ,
    0.298318147773392541856078308186290E+01 ,
    0.300862185369705648334891447919738E+01 ,
    0.303192605491475067106661125862474E+01 ,
    0.305305945874795438311416811479761E+01 ,
    0.307199066796686933500090094549429E+01 ,
    0.308869155763938591584764710926429E+01 ,
    0.310313731746884216158659278203016E+01 ,
    0.311530649007442653462929547847884E+01 ,
    0.312518100713696301466793152448893E+01 ,
    0.313274623228899776842473708515635E+01 ,
    0.313799106892155949561794374613687E+01 ,
    0.314090889174547900402161493641698E+01 };
        static readonly double[] WG = {
    0.175462638078359697014947660388325E-02 ,
    0.408190636345570553550002975693706E-02 ,
    0.640657310760756396773479627329123E-02 ,
    0.872202154451814058424327713474424E-02 ,
    0.110245719494857262265255543879549E-01 ,
    0.133107612316709163703455779327540E-01 ,
    0.155771816082865773179982171899586E-01 ,
    0.178204620526077320553028882397612E-01 ,
    0.200372681918039690522651969759265E-01 ,
    0.222243058216966993060826197871502E-01 ,
    0.243783253145699429787476096956216E-01 ,
    0.264961262590123540771018145067678E-01 ,
    0.285745621340084379671898176237246E-01 ,
    0.306105449460499209760390364852786E-01 ,
    0.326010497981549823260037466635667E-01 ,
    0.345431193740150228274441351676930E-01 ,
    0.364338683261655115994201535427499E-01 ,
    0.382704875595594604234073840944292E-01 ,
    0.400502484031299501815480354165505E-01 ,
    0.417705066625952392677767026131722E-01 ,
    0.434287065481864182975305066645445E-01 ,
    0.450223844712936243415489329889846E-01 ,
    0.465491727042919902223465763890159E-01 ,
    0.480068028980511412856836526763636E-01 ,
    0.493931094518661618116420524319279E-01 ,
    0.507060327307806224705048127293650E-01 ,
    0.519436221255071198696185333660077E-01 ,
    0.531040389503896708867472175779389E-01 ,
    0.541855591750961125942924976319550E-01 ,
    0.551865759859777394650465310304861E-01 ,
    0.561056021732878191690961666242501E-01 ,
    0.569412723407102464842981560142447E-01 ,
    0.576923449339141949881518065559807E-01 ,
    0.583577040851199150288558500157712E-01 ,
    0.589363612709344676578537132220122E-01 ,
    0.594274567809938125334475489977692E-01 ,
    0.598302609952288980082719101444258E-01 ,
    0.601441754678578340379823450761946E-01 ,
    0.603687338164934529306771726948592E-01 ,
    0.605036024150451610560528228175789E-01 ,
    0.605485808893855321616936317964147E-01 ,
    0.605036024150451610560528228175789E-01 ,
    0.603687338164934529306771726948592E-01 ,
    0.601441754678578340379823450761946E-01 ,
    0.598302609952288980082719101444258E-01 ,
    0.594274567809938125334475489977692E-01 ,
    0.589363612709344676578537132220122E-01 ,
    0.583577040851199150288558500157712E-01 ,
    0.576923449339141949881518065559807E-01 ,
    0.569412723407102464842981560142447E-01 ,
    0.561056021732878191690961666242501E-01 ,
    0.551865759859777394650465310304861E-01 ,
    0.541855591750961125942924976319550E-01 ,
    0.531040389503896708867472175779389E-01 ,
    0.519436221255071198696185333660077E-01 ,
    0.507060327307806224705048127293650E-01 ,
    0.493931094518661618116420524319279E-01 ,
    0.480068028980511412856836526763636E-01 ,
    0.465491727042919902223465763890159E-01 ,
    0.450223844712936243415489329889846E-01 ,
    0.434287065481864182975305066645445E-01 ,
    0.417705066625952392677767026131722E-01 ,
    0.400502484031299501815480354165505E-01 ,
    0.382704875595594604234073840944292E-01 ,
    0.364338683261655115994201535427499E-01 ,
    0.345431193740150228274441351676930E-01 ,
    0.326010497981549823260037466635667E-01 ,
    0.306105449460499209760390364852786E-01 ,
    0.285745621340084379671898176237246E-01 ,
    0.264961262590123540771018145067678E-01 ,
    0.243783253145699429787476096956216E-01 ,
    0.222243058216966993060826197871502E-01 ,
    0.200372681918039690522651969759265E-01 ,
    0.178204620526077320553028882397612E-01 ,
    0.155771816082865773179982171899586E-01 ,
    0.133107612316709163703455779327540E-01 ,
    0.110245719494857262265255543879549E-01 ,
    0.872202154451814058424327713474424E-02 ,
    0.640657310760756396773479627329123E-02 ,
    0.408190636345570553550002975693706E-02 ,
    0.175462638078359697014947660388325E-02 };
        #endregion

        private static double BF_J_3(int n, double x, double eps = 1.0E-17)
        {
            double s = 0.0;
            for (int i = 0; i < XG.Length; i++)
            {
                s += WG[i] * Math.Cos(x * Math.Sin(XG[i]) - n * XG[i]);
            }
            return s / Math.PI;
        }

        public static double BF_J_test1(int n, double x, double eps = 1.0E-17)
        {
            return BF_J_1(n, x, eps);
        }

        public static double BF_J_test2(int n, double x, double eps = 1.0E-17)
        {
            if(x < 20) return BF_J_1(n, x, eps);

            return BF_J_2(n, x, eps);
        }

        public static double BF_J_test3(int n, double x, double eps = 1.0E-17)
        {
            if (x < 4) return BF_J_1(n, x, eps);
            if (x > 20) return BF_J_2(n, x, eps);

            return BF_J_3(n, x, eps);
        }

        public static double Jn(int n, double x, double eps = 1.0E-17) => BF_J_test3(n, x, eps);
    }
}
